$namespace=RegexpParsing

COMPILER Regexp

	struct PToken
	{
		enum
		{
			Union,
			Concatenation,
			Closure,
			Terminal
		} Type;

		struct { PToken *P; };
		struct { PToken *P1, *P2; };
		struct { std::string Symbol; };

		PToken() :
			P( 0 ),
			P1( 0 ),
			P2( 0 ),
			Symbol()
		{
		}

		~PToken()
		{
			if ( Type == Closure )
			{
				delete P;
			}

			if ( Type == Union 
				|| Type == Concatenation )
			{
				delete P1;
				delete P2;
			}
		}
	};

	std::stack<PToken*> S;

	void PushUnion()
	{
		auto t = new PToken();
		t->Type = PToken::Union;

		t->P1 = S.top(); 
		S.pop();

		t->P2 = S.top(); 
		S.pop();

		S.push( t );
	}

	void PushConcatenation()
	{
		auto t = new PToken();
		t->Type = PToken::Concatenation;

		t->P1 = S.top(); 
		S.pop();

		t->P2 = S.top(); 
		S.pop();

		S.push( t );
	}

	void PushClosure()
	{
		auto t = new PToken();
		t->Type = PToken::Closure;

		t->P = S.top(); 
		S.pop();

		S.push( t );
	}

	void PushTerminal( wchar_t* w )
	{
		auto t = new PToken();
		t->Type = PToken::Terminal;

		std::wstring ws( w );
		std::string str( ws.begin(), ws.end() );

		t->Symbol = str;

		S.push( t );
	}

CHARACTERS

	UnionC  = '|'.
	ClosureC  = '*'.
	LeftRoundBracketC = '(' .
	RightRoundBracketC = ')' .
	SymbolC = ANY - UnionC - ClosureC - LeftRoundBracketC - RightRoundBracketC .


TOKENS

	Union  = UnionC.
	Closure  = '*'.
	Symbol = SymbolC.
	LeftRoundBracket = LeftRoundBracketC .
	RightRoundBracket = RightRoundBracketC .

PRODUCTIONS

	Regexp = UnionExpression .
	UnionExpression = ConcatenationExpression [ Union UnionExpression (. PushUnion(); .) ] .
	ConcatenationExpression = ClosureExpression [ ConcatenationExpression (. PushConcatenation(); .) ] .
	ClosureExpression = Expression [ Closure (. PushClosure(); .) ] .
	Expression = LeftRoundBracket UnionExpression RightRoundBracket | Symbol (. PushTerminal( t->val ); .).

END Regexp.
